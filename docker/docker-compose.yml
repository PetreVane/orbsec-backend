version: '2.1'

services:

  zookeeper:
      image: wurstmeister/zookeeper:latest
      ports:
        - 2181:2181
      networks:
        backend:
          aliases:
            - "zookeeper"

  kafka-server:
      image: wurstmeister/kafka:latest
      ports:
        - 9092:9092
      environment:
        - KAFKA_ADVERTISED_HOST_NAME=kafka-server # change when in production
        - KAFKA_ADVERTISED_PORT=9092
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
        - KAFKA_CREATE_TOPICS=licenses:1:1,organizations:1:1

      volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
      depends_on:
        - zookeeper
      networks:
        backend:
          aliases:
            - "kafka-server"


  # redisserver:
  #     image: redis:alpine
  #     ports:
  #       - 6379:6379
  #     networks:
  #       backend:
  #         aliases:
  #           - "redis"

  license-database:
    image: postgres:latest
    ports:
      - "5432"

    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "orbsec_dev_license"

    volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql

    networks:
      backend:
        aliases:
          - "license-database"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  organization-database:
    image: postgres:latest
    ports:
      - "5432:5432"

    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "orbsec_dev_organization"

    volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql

    networks:
      backend:
        aliases:
          - "organization-database"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  config-service:
    image: orbsec/config-service:0.0.1-SNAPSHOT
    ports:
       - "8071:8071"

    environment:
      - spring.application.name=config-service
      - encrypt.key=super-secret-encryption-key

      - spring.profiles.active=git
      - spring.cloud.config.override-system-properties=false
      - spring.cloud.config.server.git.uri=https://github.com/PetreVane/orbsec-configuration-repo
      - spring.cloud.config.server.git.clone-on-start=true
      - spring.cloud.config.server.git.default-label=main
      - spring.cloud.bus.enabled=true

      - management.endpoints.web.exposure.include=*
      - spring.kafka.bootstrap-servers=http://kafka-server:9092

    depends_on:
      kafka-server:
        condition: service_started

    networks:
      backend:
        aliases:
          - "config-service"

  discovery-service:
    image: orbsec/discovery-service:0.0.1-SNAPSHOT
    ports:
       - "8070:8070"

    environment:
      - server.port=8070
      - spring.cloud.config.uri=http://config-service:8071
      - eureka.client.registerWithEureka=false
      - eureka.client.fetchRegistry=false
      - spring.kafka.bootstrap-servers=http://kafka-server:9092
      # - spring.profiles.active=dev

    depends_on:
      license-database:
        condition: service_healthy
      config-service:
        condition: service_started
      kafka-server:
        condition: service_started

    networks:
      backend:
        aliases:
          - "discovery-service"

  licensing-service:
    image: orbsec/licensing-service:0.0.1-SNAPSHOT

    environment:
      - spring.cloud.config.uri=http://config-service:8071
      - spring.profiles.active=production
      - database.server.port=5432
      - spring.datasource.url=jdbc:postgresql://license-database:5432/orbsec_dev_license
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - eureka.client.service-url.defaultZone=http://discovery-service:8070/eureka
      - spring.kafka.bootstrap-servers=http://kafka-server:9092

    depends_on:
      license-database:
        condition: service_healthy
      configserver:
        condition: service_started
      discovery-service:
        condition: service_started
      kafka-server:
        condition: service_started

    ports:
      - "8080:8080"

    networks:
      backend:
        aliases:
          - "licensing-service"

  organization-service:
    image: orbsec/organization-service:0.0.1-SNAPSHOT

    environment:
      - spring.cloud.config.uri=http://config-service:8071
      - spring.profiles.active=production
      # - database.server.port=5433
      - spring.datasource.url=jdbc:postgresql://organization-database:5432/orbsec_dev_organization
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - eureka.client.service-url.defaultZone=http://discovery-service:8070/eureka
      - spring.kafka.bootstrap-servers=http://kafka-server:9092

    depends_on:
      organization-database:
        condition: service_healthy
      configserver:
        condition: service_started
      discovery-service:
          condition: service_started
      kafka-server:
        condition: service_started

    ports:
      - "8081:8081"
    networks:
      - backend


networks:
  backend:
    driver: bridge
